<div class="my-3">
    <select class="form-control" @onchange="OnGearSelected">
        <option>Select Gear</option>
        @foreach (Gear gear in GearList)
        {
            <option>@gear.Name</option>
        }
    </select>
</div>
<hr />
<div class="mb-3">
    <p>Add New Gear</p>
    <div class="row mb-1">
        <div class="col">
            <input class="form-control" type="text" placeholder="Gear Name" @bind="NewGear.Name" />
        </div>
        <div class="col">
            <input class="form-control" type="text" placeholder="Description" @bind="NewGear.Description" />
        </div>
        <div class="col">
            <input class="form-control" type="text" placeholder="Effect" @bind="NewGear.Effect" />
        </div>
    </div>

    <button class="btn btn-success" @onclick="OnSubmitNewGear">Add New Gear</button>
</div>
<hr />
<div class="mb-3">
    <p>Your Gear</p>

    @foreach (Gear gear in Character.Gear)
    {
        <div class="mb-2">
            <div class="row mb-2">
                <div class="col">
                    <input class="form-control" type="text" placeholder="Gear Name" @bind="gear.Name" @onfocusout="UpdateGearList" />
                </div>
                <div class="col">
                    <input class="form-control" type="text" placeholder="Description" @bind="gear.Description" @onfocusout="UpdateGearList" />
                </div>
                <div class="col">
                    <input class="form-control" type="text" placeholder="Effect" @bind="gear.Effect" @onfocusout="UpdateGearList" />
                </div>
            </div>

            <button class="btn btn-danger" @onclick="async () => await RemoveGear.InvokeAsync(gear)">Remove @gear.Name</button>
        </div>
    }
</div>

@code {

    [Parameter]
    public Character Character { get; set; }

    [Parameter]
    public EventCallback<Gear> AddNewGear { get; set; }

    [Parameter]
    public EventCallback<Gear> RemoveGear { get; set; }

    [Parameter]
    public EventCallback UpdateGearList { get; set; }

    [Parameter]
    public EventCallback GearSelected { get; set; }

    [Parameter]
    public List<Gear> GearList { get; set; }

    private Gear NewGear { get; set; } = new Gear();

    private async Task OnGearSelected(ChangeEventArgs args)
    {
        Gear selectedGear = GearList.FirstOrDefault(x => x.Name == args.Value.ToString());
        Character.Gear.Add(selectedGear);
        await GearSelected.InvokeAsync(selectedGear);
    }

    private async Task OnSubmitNewGear()
    {
        await AddNewGear.InvokeAsync(NewGear);
        Character.Gear.Add(NewGear);
        NewGear = new Gear();
    }

}