
<div class="row">
    <div class="col-6">
        @nameof(Attributes.Strength)
    </div>
    <div class="col-5">
        <input name="CON" type="number" class="form-control" value="@Attributes.Strength" @oninput="(x) => NotifyChange(nameof(Attributes.Strength), x)" />
    </div>
</div>
<div class="row">
    <div class="col-6">
        @nameof(Attributes.Agility)
    </div>
    <div class="col-5">
        <input name="CON" type="number" class="form-control" value="@Attributes.Agility" @oninput="(x) => NotifyChange(nameof(Attributes.Agility), x)" />
    </div>
</div>
<div class="row">
    <div class="col-6">
        @nameof(Attributes.Toughness)
    </div>
    <div class="col-5">
        <input name="CON" type="number" class="form-control" value="@Attributes.Toughness" @oninput="(x) => NotifyChange(nameof(Attributes.Toughness), x)" />
    </div>
</div>
<div class="row">
    <div class="col-6">
        @nameof(Attributes.Intellect)
    </div>
    <div class="col-5">
        <input name="CON" type="number" class="form-control" value="@Attributes.Intellect" @oninput="(x) => NotifyChange(nameof(Attributes.Intellect), x)" />
    </div>
</div>
<div class="row">
    <div class="col-6">
        @nameof(Attributes.Willpower)
    </div>
    <div class="col-5">
        <input name="CON" type="number" class="form-control" value="@Attributes.Willpower" @oninput="(x) => NotifyChange(nameof(Attributes.Willpower), x)" />
    </div>
</div>
<div class="row">
    <div class="col-6">
        @nameof(Attributes.Fellowship)
    </div>
    <div class="col-5">
        <input name="CON" type="number" class="form-control" value="@Attributes.Fellowship" @oninput="(x) => NotifyChange(nameof(Attributes.Fellowship), x)" />
    </div>
</div>
<div class="row">
    <div class="col-6">
        @nameof(Attributes.Initiative)
    </div>
    <div class="col-5">
        <input name="CON" type="number" class="form-control" value="@Attributes.Initiative" @oninput="(x) => NotifyChange(nameof(Attributes.Initiative), x)" />
    </div>
</div>

@code {

    [Parameter]
    public Attributes Attributes { get; set; }

    [Parameter]
    public EventCallback ValueChanged { get; set; }

    private async Task NotifyChange(string propertyName, ChangeEventArgs args)
    {
        int value = int.Parse(args.Value.ToString());
        Attributes.GetType().GetProperty(propertyName).SetValue(Attributes, value);
        await ValueChanged.InvokeAsync();
    }

}