<MudCard Square="false" @onclick="ToggleInputDisplay">
    <MudCardContent Class="@HeaderCss">
        <MudText Class="mb-2">@(ViewModel.Character.Archetype?.Name ?? "None")</MudText>
        <MudText Class="mb-2">Keywords: @(ViewModel.Character.Archetype?.Keywords ?? "None")</MudText>
        <MudText Class="mb-2">Ability: @(ViewModel.Character.Archetype?.ArchetypeAbility ?? "None")</MudText>
        <MudText Class="mb-2">Influence: @(ViewModel.Character.Archetype?.Influence)</MudText>
    </MudCardContent>
    <MudCardContent Class="@InputCss">
        @if (ViewModel.Archetypes.Any())
        {
            <MudSelect T="int" Label="Archetype" Variant="Variant.Filled" @bind-Value="ViewModel.Character.Archetype.ArchetypeId">
                @foreach (Archetype archetype in ViewModel.Archetypes)
                {
                    <MudSelectItem Value="archetype.ArchetypeId">@archetype.Name</MudSelectItem>
                }
            </MudSelect>
        }
        else
        {
            <MudText>No Archetypes Found.</MudText>
        }
    </MudCardContent>
    <MudCardActions Class="@InputCss">
        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="Save">Save</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [CascadingParameter]
    public CharacterViewModel ViewModel { get; set; }

    private bool DisplayInput = false;
    private string InputCss => DisplayInput ? Constants.NoCssClass : Constants.NoDisplayCssClass;
    private string HeaderCss => DisplayInput ? Constants.NoDisplayCssClass : Constants.NoCssClass;
    private void ToggleInputDisplay() => DisplayInput = !DisplayInput;

    private async Task Save()
    {
        ToggleInputDisplay();
        await ViewModel.UpdateArchetype();
    }
}