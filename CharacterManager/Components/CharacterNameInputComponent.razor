
<MudCardContent>
    <div class="mb-3">
        @if (!string.IsNullOrWhiteSpace(ViewModel.Character.AvatarPath))
        {
            <img style="max-width: 25%; max-height: 25%;" src="art/@ViewModel.Character.AvatarPath">
        }
    </div>
    <MudText class="@CharacterNameHeaderCss" Typo="Typo.h6" @onclick="ToggleCharacterNameInputDisplay">@ViewModel.Character.Name</MudText>
    <MudText>@ViewModel.Character.Archetype?.Name</MudText>
    <MudTextField class="@CharacterNameInputCss" @bind-Value="ViewModel.Character.Name" Label="Name" Variant="Variant.Outlined" />
</MudCardContent>
<MudCardActions>
    <MudButton class="@CharacterNameInputCss" Variant="Variant.Text" Color="Color.Primary" @onclick="Save">Save</MudButton>
</MudCardActions>

@code {

    [CascadingParameter]
    public CharacterViewModel ViewModel { get; set; }

    private bool DisplayCharacterNameInput = false;
    private string CharacterNameInputCss => DisplayCharacterNameInput ? Constants.NoCssClass : Constants.NoDisplayCssClass;
    private string CharacterNameHeaderCss => DisplayCharacterNameInput ? Constants.NoDisplayCssClass : Constants.NoCssClass;
    private void ToggleCharacterNameInputDisplay() => DisplayCharacterNameInput = !DisplayCharacterNameInput;

    private async Task Save()
    {
        ToggleCharacterNameInputDisplay();
        ViewModel.UpdateCharacter();
    }

}

