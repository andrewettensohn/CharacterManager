// <auto-generated />
using System;
using CharacterManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharacterManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210423131606_Inital")]
    partial class Inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("CharacterGear", b =>
                {
                    b.Property<Guid>("CharacterGearId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CharacterGearId1")
                        .HasColumnType("TEXT");

                    b.HasKey("CharacterGearId", "CharacterGearId1");

                    b.HasIndex("CharacterGearId1");

                    b.ToTable("CharacterGear");
                });

            modelBuilder.Entity("CharacterManager.DAC.Models.SyncStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ArchetypeLastSync")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ArmorLastSync")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CharacterLastSync")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GearLastSync")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDownSyncStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PsychicLastSync")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TalentLastSync")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WeaponLastSync")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SyncStatus");
                });

            modelBuilder.Entity("CharacterManager.Models.Archetype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ArchetypeAbility")
                        .HasColumnType("TEXT");

                    b.Property<int>("AttributeBonus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Influence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SkillBonus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XPCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Archetype");
                });

            modelBuilder.Entity("CharacterManager.Models.Armor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AR")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Traits")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Armor");
                });

            modelBuilder.Entity("CharacterManager.Models.Attributes", b =>
                {
                    b.Property<Guid>("AttributesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Agility")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Fellowship")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Initiative")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intellect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Toughness")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Willpower")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttributesId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ArchetypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ArmorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Glory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tier")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Wrath")
                        .HasColumnType("INTEGER");

                    b.Property<int>("XP")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArchetypeId");

                    b.HasIndex("ArmorId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("CharacterManager.Models.Gear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Effect")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rarity")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Gear");
                });

            modelBuilder.Entity("CharacterManager.Models.PyschicPower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Activation")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DN")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discipline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Effect")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MultiTarget")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Potency")
                        .HasColumnType("TEXT");

                    b.Property<string>("Range")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requirements")
                        .HasColumnType("TEXT");

                    b.Property<int>("XPCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("PsychicPowers");
                });

            modelBuilder.Entity("CharacterManager.Models.Skills", b =>
                {
                    b.Property<Guid>("SkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Athletics")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Awareness")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ballistic")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Cunning")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deception")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Insight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intimidation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Investigation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Leadership")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Medicae")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Persuasion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pilot")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pyschic")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Scholar")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stealth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Survival")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tech")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weapon")
                        .HasColumnType("INTEGER");

                    b.HasKey("SkillsId");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CharacterManager.Models.Talent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requirements")
                        .HasColumnType("TEXT");

                    b.Property<int>("XPCost")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Talent");
                });

            modelBuilder.Entity("CharacterManager.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceMethod")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceRepository")
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CharacterManager.Models.Weapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ED")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMelee")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Range")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salvo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Traits")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Weapon");
                });

            modelBuilder.Entity("CharacterManager.Sync.API.Models.CharacterSync", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Json")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CharacterSync");
                });

            modelBuilder.Entity("CharacterTalent", b =>
                {
                    b.Property<Guid>("CharactersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TalentsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CharactersId", "TalentsId");

                    b.HasIndex("TalentsId");

                    b.ToTable("CharacterTalent");
                });

            modelBuilder.Entity("CharacterWeapon", b =>
                {
                    b.Property<Guid>("CharactersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WeaponsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CharactersId", "WeaponsId");

                    b.HasIndex("WeaponsId");

                    b.ToTable("CharacterWeapon");
                });

            modelBuilder.Entity("CharacterGear", b =>
                {
                    b.HasOne("CharacterManager.Models.Gear", null)
                        .WithMany()
                        .HasForeignKey("CharacterGearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterGearId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManager.Models.Attributes", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithOne("Attributes")
                        .HasForeignKey("CharacterManager.Models.Attributes", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.HasOne("CharacterManager.Models.Archetype", "Archetype")
                        .WithMany()
                        .HasForeignKey("ArchetypeId");

                    b.HasOne("CharacterManager.Models.Armor", "Armor")
                        .WithMany()
                        .HasForeignKey("ArmorId");

                    b.Navigation("Archetype");

                    b.Navigation("Armor");
                });

            modelBuilder.Entity("CharacterManager.Models.PyschicPower", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany("PsychicPowers")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterManager.Models.Skills", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithOne("Skills")
                        .HasForeignKey("CharacterManager.Models.Skills", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterTalent", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Talent", null)
                        .WithMany()
                        .HasForeignKey("TalentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterWeapon", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharactersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharacterManager.Models.Weapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("PsychicPowers");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
