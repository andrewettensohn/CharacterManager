// <auto-generated />
using System;
using CharacterManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharacterManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassCharacterClassId")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("ClassCharacterClassId");

                    b.HasIndex("RaceId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterAction", b =>
                {
                    b.Property<int>("CharacterActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Damage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterActionId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterActions");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterClass", b =>
                {
                    b.Property<int>("CharacterClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterClassId");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterLinks.CharacterActionLink", b =>
                {
                    b.Property<int>("CharacterActionLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CharacterActionId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("CharacterActionLinkId");

                    b.ToTable("CharacterActionLink");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterLinks.CharacterClassLink", b =>
                {
                    b.Property<int>("CharacterClassLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("CharacterClassLinkId");

                    b.ToTable("CharacterClassLink");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterLinks.EquipmentLink", b =>
                {
                    b.Property<int>("EquipmentLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentLinkId");

                    b.ToTable("EquipmentLink");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterLinks.FeatureLink", b =>
                {
                    b.Property<int>("FeatureLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("FeatureLinkId");

                    b.ToTable("FeatureLink");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterLinks.RaceLink", b =>
                {
                    b.Property<int>("RaceLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("RaceLinkId");

                    b.ToTable("RaceLink");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterLinks.SpellLink", b =>
                {
                    b.Property<int>("SpellLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("SpellLinkId");

                    b.ToTable("SpellLink");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterLinks.StatLink", b =>
                {
                    b.Property<int>("StatLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("StatId")
                        .HasColumnType("int");

                    b.HasKey("StatLinkId");

                    b.ToTable("StatLink");
                });

            modelBuilder.Entity("CharacterManager.Models.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("EquipmentId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("CharacterManager.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("CharacterManager.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("CharacterManager.Models.Spell", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("DC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpellId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("CharacterManager.Models.Stat", b =>
                {
                    b.Property<int>("StatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("Consitution")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("ProficencyBonus")
                        .HasColumnType("int");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("StatId");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("RaceId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.HasOne("CharacterManager.Models.CharacterClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassCharacterClassId");

                    b.HasOne("CharacterManager.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.Navigation("Class");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterAction", b =>
                {
                    b.HasOne("CharacterManager.Models.CharacterClass", null)
                        .WithMany("ClassActions")
                        .HasForeignKey("CharacterClassId");

                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany("Actions")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterManager.Models.Equipment", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany("Equipment")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterManager.Models.Feature", b =>
                {
                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany("Features")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterManager.Models.Spell", b =>
                {
                    b.HasOne("CharacterManager.Models.CharacterClass", null)
                        .WithMany("ClassSpells")
                        .HasForeignKey("CharacterClassId");

                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany("Spells")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterManager.Models.Stat", b =>
                {
                    b.HasOne("CharacterManager.Models.CharacterClass", null)
                        .WithMany("ClassStatModifiers")
                        .HasForeignKey("CharacterClassId");

                    b.HasOne("CharacterManager.Models.Character", null)
                        .WithMany("Stats")
                        .HasForeignKey("CharacterId");

                    b.HasOne("CharacterManager.Models.Equipment", null)
                        .WithMany("EquipmentStatModifiers")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("CharacterManager.Models.Feature", null)
                        .WithMany("FeatureStatModifiers")
                        .HasForeignKey("FeatureId");

                    b.HasOne("CharacterManager.Models.Race", null)
                        .WithMany("RaceModifer")
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("CharacterManager.Models.Character", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Equipment");

                    b.Navigation("Features");

                    b.Navigation("Spells");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("CharacterManager.Models.CharacterClass", b =>
                {
                    b.Navigation("ClassActions");

                    b.Navigation("ClassSpells");

                    b.Navigation("ClassStatModifiers");
                });

            modelBuilder.Entity("CharacterManager.Models.Equipment", b =>
                {
                    b.Navigation("EquipmentStatModifiers");
                });

            modelBuilder.Entity("CharacterManager.Models.Feature", b =>
                {
                    b.Navigation("FeatureStatModifiers");
                });

            modelBuilder.Entity("CharacterManager.Models.Race", b =>
                {
                    b.Navigation("RaceModifer");
                });
#pragma warning restore 612, 618
        }
    }
}
